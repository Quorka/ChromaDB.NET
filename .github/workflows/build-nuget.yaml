name: Build and Pack NuGet

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ] # Trigger on version tags like v0.1.0
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build_native:
    name: Build Native ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Keep running other jobs even if one fails
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_suffix: linux-x64
            lib_name: libchroma_csharp.so
            dll_search_name: chroma_csharp # For NativeMethods.cs loading
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_suffix: win-x64
            lib_name: chroma_csharp.dll
            dll_search_name: chroma_csharp # For NativeMethods.cs loading
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_suffix: osx-x64
            lib_name: libchroma_csharp.dylib
            dll_search_name: chroma_csharp # For NativeMethods.cs loading

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y protobuf-compiler libsqlite3-dev

    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install protobuf sqlite

    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install protoc SQLite --yes
        
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Cache (Cargo registry, index, build)
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build native library
      run: cargo build --release --target ${{ matrix.target }}
      env:
        RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C target-feature=+crt-static' || '' }}

    - name: Prepare artifact
      shell: bash
      run: |
        mkdir -p artifact/runtimes/${{ matrix.artifact_suffix }}/native/
        cp target/${{ matrix.target }}/release/${{ matrix.lib_name }} artifact/runtimes/${{ matrix.artifact_suffix }}/native/

    # Setup testing
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    # Create local runtime folders structure to ensure project builds correctly
    - name: Setup runtimes directory for testing
      shell: bash
      run: |
        mkdir -p runtimes/${{ matrix.artifact_suffix }}/native/
        cp target/${{ matrix.target }}/release/${{ matrix.lib_name }} runtimes/${{ matrix.artifact_suffix }}/native/

    # Run CI tools to see what architecture is available
    - name: Check environment (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        echo "MacOS Architecture: $(uname -m)"
        lipo -info target/${{ matrix.target }}/release/${{ matrix.lib_name }} || true
        file target/${{ matrix.target }}/release/${{ matrix.lib_name }}

    # Build tests with debug output for native loading
    - name: Build Tests
      run: dotnet build Tests/ChromaDB.NET.Tests/ChromaDB.NET.Tests.csproj -c Release
      
    # Prepare native libraries for test execution AFTER build
    - name: Prepare libraries for tests
      shell: bash
      run: |
        TEST_OUTPUT_DIR="Tests/ChromaDB.NET.Tests/bin/Release/net8.0"
        RUNTIME_DIR="$TEST_OUTPUT_DIR"
        SOURCE_LIB="target/${{ matrix.target }}/release/${{ matrix.lib_name }}"

        echo "Copying native library for testing..."
        echo "Source: $SOURCE_LIB"
        echo "Destination Dir: $RUNTIME_DIR"
        
        mkdir -p "$RUNTIME_DIR"
        cp "$SOURCE_LIB" "$RUNTIME_DIR/"
        
        # Optional: Also copy to the root test output dir as a fallback (might be needed depending on loading specifics)
        # echo "Copying native library to test output root as well..."
        # cp "$SOURCE_LIB" "$TEST_OUTPUT_DIR/"

        # Set executable permissions if needed (primarily for Linux/macOS)
        if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
          chmod +x "$RUNTIME_DIR/${{ matrix.lib_name }}"
          # chmod +x "$TEST_OUTPUT_DIR/${{ matrix.lib_name }}" # If using the fallback copy
        fi
        
        echo "Listing contents of $TEST_OUTPUT_DIR"
        ls -R "$TEST_OUTPUT_DIR"

    # Run tests with detailed logging
    - name: Run Tests
      id: run_tests
      run: |
        dotnet test Tests/ChromaDB.NET.Tests/ChromaDB.NET.Tests.csproj -c Release --no-build --verbosity normal
      continue-on-error: true
      
    # Report test status
    - name: Report Test Status
      shell: bash
      run: |
        if [ "${{ steps.run_tests.outcome }}" == "success" ]; then
          echo "✅ Tests passed on ${{ matrix.os }}"
        else
          echo "❌ Tests failed on ${{ matrix.os }}"
          echo "Check the test logs above for details on the failure."
        fi

    - name: Upload native artifact
      uses: actions/upload-artifact@v4
      with:
        name: native-libs-${{ matrix.artifact_suffix }}
        path: artifact/

  pack_nuget:
    name: Pack NuGet Package
    needs: build_native 
    runs-on: ubuntu-latest 

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Download all native artifacts
      uses: actions/download-artifact@v4
      with:
        path: native-artifacts 

    - name: Display structure of downloaded files
      run: ls -R native-artifacts

    - name: Copy native libraries to expected location for packing
      shell: bash
      run: |
        mkdir -p target
        find native-artifacts -mindepth 1 -maxdepth 1 -type d -exec cp -r {}/runtimes target/ \;

        echo "--- Target directory structure before packing ---"
        ls -R target

    - name: Pack NuGet package
      run: dotnet pack ./ChromaDB.NET/ChromaDB.NET.csproj -c Release -o ./nuget-package --nologo

    - name: Upload NuGet package artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ./nuget-package/*.nupkg